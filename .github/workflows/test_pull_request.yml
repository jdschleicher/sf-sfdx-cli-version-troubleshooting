name: Test Pull Request

on:
  push:

env:
  GITHUB_JSON:                  ${{ toJSON(github) }}
  PACKAGE_NAME:                 ${{ vars.PACKAGE_NAME }} 
  DEVHUB_ALIAS:                 "devhub"
  SCRATCH_ORG_ALIAS:            "ci-scratch-org"

jobs:
  pull-request:
    runs-on: ${{ vars.GH_ACTIONS_OPERATING_SYSTEM }}

    outputs:
      workflow_start_time: ${{ steps.workflow_initialization.outputs.workflow_start_time }}
  
    steps:

      - name: CHECKOUT CURRENT REPOSITORY IN VIRTUAL MACHINE
        uses: actions/checkout@v3

      - name: SET WORKFLOW INITIALIZATION TIMESTAMP
        id: workflow_initialization
        shell: pwsh
        run: |
          Write-Host "CAPTURING TIMESTAMP ENVIRONMENT"
          $start_time = $(Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")
          "workflow_start_time=$start_time" >> $env:GITHUB_OUTPUT

      - name: INSTALL SFDX CLI 
        run: sh 'ci-cd/install/install-sfdx.sh'

      - name: AUTHENTICATE DEVHUB AUTH URL
        env:
          DEVHUB_AUTH_URL: ${{ secrets.DEVHUB_AUTH_URL }}
        shell: pwsh
        run: . ./ci_system/sfdx/auth_url.ps1 -auth_url $env:DEVHUB_AUTH_URL -org_alias "$env:DEVHUB_ALIAS"
    
      - name: INSTALL TEXEI
        run: sh 'ci-cd/install/install-texei.sh'

      - name: CREATE SCRATCH ORG
        shell: pwsh
        run: . .\ci-cd\scratch_org\create_scratch_org.ps1 -devhub_alias $env:DEVHUB_ALIAS -scratch_org_alias $env:SCRATCH_ORG_ALIAS

      - name: INSTALL PACKAGE DEPENDENCIES TO SCRATCH ORG
        shell: pwsh
        run: . .\ci-cd\package\install-package-dependencies-texei-scratch.ps1 $env:SCRATCH_ORG_ALIAS $env:DEVHUB_ALIAS

      - name: PUSH SOURCE CODE BASE TO SCRATCH ORG
        shell: pwsh
        run: . .\ci-cd\scratch_org\push_src_to_scratch_org.ps1 -scratch_org_alias $env:SCRATCH_ORG_ALIAS

  validate-only-deploy-to-sit:
    runs-on: ${{ vars.GH_ACTIONS_OPERATING_SYSTEM }}

    env:
        SIT_ALIAS:                    "sit"
        SF_SIT_AUTH_URL:              ${{ secrets.SF_SIT_AUTH_URL }}
        
    steps:

      - name: CHECKOUT CURRENT REPOSITORY IN VIRTUAL MACHINE
        uses: actions/checkout@v3

      - name: INSTALL SFDX CLI 
        run: sh 'ci-cd/install/install-sfdx.sh'

      - name: AUTHENTICATE SIT ORG
        shell: pwsh
        run: . .\ci-cd\authenticate\authenticate-salesforce-authurl.ps1 -org_alias $env:SIT_ALIAS -auth_url $env:SF_SIT_AUTH_URL

      - name: VALIDATE ONLY DEPLOY TO SIT SANDBOX
        shell: pwsh
        run: |
          $default_package_directory = "force-app"
          . .\ci-cd\deploy\validate_only_deploy_by_default_package_path.ps1 -target_org_to_validate_against $env:SIT_ALIAS -path_to_validate $default_package_directory


    runs-on: ${{ vars.GH_ACTIONS_OPERATING_SYSTEM }}

    needs: [
      va-salesforce-pull-request-job-sit,
      validate-only-deploy-to-sit
    ]

    if: ${{ failure() }}

    steps:

      - name: GET LATEST CI/CD SCRIPTS
        shell: bash
        run: |
         echo "operating system:  ${{ vars.GH_ACTIONS_OPERATING_SYSTEM }}"
          if [[ "${{ vars.GH_ACTIONS_OPERATING_SYSTEM }}" == "windows-latest" ]]
          then
              git config --system core.longpaths true
          fi
          echo "[1] CREATE SSH KEY"
          mkdir ~/.ssh
          echo "${{ secrets.DTC_RELEASE_CICD_KEY_BASE64 }}" | base64 -di > ~/.ssh/dtc-release-cicd.ssh  
          chmod 400 ~/.ssh/dtc-release-cicd.ssh  
          echo "[2] INITIALIZE SSH-AGENT"
          eval "$(ssh-agent -s)"
          echo "[3] ADD SSH KEY"
          ssh-add ~/.ssh/dtc-release-cicd.ssh
          echo "[4] REMOVE ./CI-CD DIRECTORY IF IT ALREADY EXISTS"
          rm -rf ci-cd
          ssh-keyscan github.com >> ~/.ssh/known_hosts

          echo "[5] CLONE CENTRAL CI/CD REPOSITORY"
          git clone git@github.com:department-of-veterans-affairs/dtc-release-cicd.git -b ${{ env.CI_TAG_NAME}} ci-cd

      - name: INSTALL SFDX 
        run: sh 'ci-cd/install/install-sfdx.sh'

      - name: AUTHENTICATE DEVHUB PWSH
        shell: pwsh
        run: . .\ci-cd\authenticate\authenticate-salesforce-devhub.ps1 -auth_key_base64 $env:SF_DEVHUB_KEY_BASE64 -auth_clientid $env:SF_DEVHUB_CLIENTID -auth_username $env:DEVHUB_ORG_USERNAME -auth_org_url $env:SF_DEVHUB_ORG_URL -devhub_alias $env:DEVHUB_ALIAS
      
      - name: INSTALL TEXEI
        run: sh 'ci-cd/install/install-texei.sh'
      
      - name: SAVE FAILURE RESULT
        shell: pwsh
        run: |
          Write-Host "CREATING WORKFLOW RECORD"
          . .\ci-cd\githhubworkflowrun\create_githubworkflowrun.ps1 -org_to_save_workflowrun $env:DEVHUB_ALIAS -was_successful $false -github_json $env:GITHUB_JSON -workflow_start_time ${{ needs.va-salesforce-pull-request-job-sit.outputs.workflow_start_time }}